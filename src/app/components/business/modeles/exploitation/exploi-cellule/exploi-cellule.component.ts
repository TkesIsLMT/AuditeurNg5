import { Component, Input, OnInit, OnDestroy, ElementRef, Renderer2 } from '@angular/core';
import { ElementBase } from '../../element-base';
import { ElementService } from '../../element.service';
import { NgbModal } from '@ng-bootstrap/ng-bootstrap';
import { ExploiCelluleCommentaireComponent } from '../exploi-cellule-commentaire/exploi-cellule-commentaire.component';
import { PointDetail } from '../../../points/point-detail';
import { Observable } from 'rxjs/Observable';
import { map, tap, takeWhile } from 'rxjs/operators';
import * as _ from 'lodash';
import { PiService } from '../../../pi/pi.service';
import { IntervalObservable } from 'rxjs/observable/IntervalObservable';
import { ISubscription } from 'rxjs/Subscription';
import { MessageService } from '../../../../../services/message.service';
import { TimerObservable } from 'rxjs/observable/TimerObservable';
import { ValeurInspection } from '../valeur-inspection';
import { TypePoint } from '../../../../../enums/type-point.enum';

@Component({
  selector: 'app-exploi-cellule',
  templateUrl: './exploi-cellule.component.html',
  styleUrls: ['./exploi-cellule.component.css'],
})
export class ExploiCelluleComponent implements OnInit,OnDestroy {
  
  @Input() element:ElementBase;
  @Input() valInspect:ValeurInspection;
  hasPoint:boolean = false;
  hasPISynchro:boolean = false;
  pointControle: PointDetail = new PointDetail();

  private activeSub:ISubscription;
  private information:string;
  private currentValue;
  private piValue$:Observable<any>;
  private $piValue:ISubscription;
  private isQueryPi:boolean = false;
  private borneMin:number;
  private borneMax:number;

  constructor(private eleSrv:ElementService, private piSrv:PiService, private msgSrv:MessageService) {
    this.valInspect = this.valInspect || new ValeurInspection();
  }

  // onClick(event){
  //   event.preventDefault();
  //   event.stopPropagation();
  //   this.eleSrv.activateElement(this.element);
  // }

  ngOnInit(): void {
    this.eleSrv.pointsDisponible.data.subscribe(res=> {
      let pc = _.find(res, ['Id',this.element.PointControleId])
      this.hasPoint = !_.isNil(pc);
      if (this.hasPoint){
        this.pointControle = pc;
        this.initPoint();
        this.initPI();
      }
    });
    // this.activeSub = this.eleSrv.activeElement$.subscribe(res=>{
    //   const active = this.element.Id === res.Id;
    //   const action = active ? 'addClass':'removeClass';
    //   this.renderer[action](this.elRef.nativeElement,'active-element');
    // });
 }

  ngOnDestroy(): void {
    if (this.$piValue)
      this.$piValue.unsubscribe();
   // this.activeSub.unsubscribe();
}

  private initPoint() {
    if (this.pointControle && this.pointControle.TypePoint === TypePoint.Numérique && this.pointControle.BorneMinimale!= this.pointControle.BorneMaximale){
      this.information = `${this.pointControle.BorneMinimale} <= valeur <= ${this.pointControle.BorneMaximale}`;
      this.borneMin = this.pointControle.BorneMinimale;
      this.borneMax = this.pointControle.BorneMaximale;
    }
  }

  private initPI(){
    if (this.pointControle.IdPI){
      this.hasPISynchro = true;
      this.piValue$ = TimerObservable.create(0,30000).pipe(
        tap(()=>this.isQueryPi = true),
        map(()=>this.piSrv.getPiValeur(this.pointControle.IdPI).subscribe(
          res=>{
            this.currentValue = res.Value;
            this.isQueryPi = false;},
          err=> {
            this.msgSrv.error(err);
            console.log(err);
            this.isQueryPi = false;}))
      );
      this.$piValue = this.piValue$.subscribe(res=>console.log('data received'),err=>console.log(err),()=>console.log("terminé !"));
    }
  }

  private manageClick(off:boolean)
  {
    if (_.isUndefined(this.currentValue))
      this.currentValue = off;
    this.currentValue = !this.currentValue;
  }
  clickOn(){
    this.manageClick(false);
  }
  clickOff(){
    this.manageClick(true);
  }
}
